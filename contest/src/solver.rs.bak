use std::{io::{Write, BufRead}, panic};
use std::ops::{Add, Sub, Mul, Div};
use crate::{fast_input::FastInput, static_modint::{StaticModInt, MF998244353}, vector_matrix::Matrix};
use crate::macros::input;
use crate::arithmetic::*;
use crate::algebraic_structure::*;

type mi = StaticModInt<i32, MF998244353>;

pub unsafe fn solve_one<I: BufRead>(test_id: usize, fi: &mut FastInput<I>, fo: &mut impl Write) {
    let n = fi.ru();
    let mat: Vec<mi> = (0..n*n).map(|_| fi.r()).collect();
    let mat = Matrix::with_initial_value(mat, n, n);
    if let Some(inv) = mat.possible_inv() {
        for i in 0..n {
            for j in 0..n {
                write!(fo, "{} ", inv[(i, j)]);
            }
            writeln!(fo);
        }
    } else {
        writeln!(fo, "-1");
    }
}
  
pub unsafe fn solve_multi<I: BufRead>(fi: &mut FastInput<I>, fo: &mut impl Write) {
    let t: usize = 1;//fi.read();
    for test_id in 1 ..= t {
        solve_one(test_id, fi, fo);
    }
}