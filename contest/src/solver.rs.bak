use std::{io::{Write, BufRead}, panic};
use std::ops::{Add, Sub, Mul, Div};
use crate::{fast_input::FastInput, linear_feedback_shift_register::LinearFeedbackShiftRegister, static_modint::{StaticModInt, MF998244353}, linear_recurrence_test};
use crate::macros::input;
use crate::arithmetic::*;
use crate::algebraic_structure::*;

type mi = StaticModInt<i32, MF998244353>;

pub unsafe fn solve_one<I: BufRead>(test_id: usize, fi: &mut FastInput<I>, fo: &mut impl Write) {
    let n = fi.ru();
    let mut lfsr = LinearFeedbackShiftRegister::new(n);
    for _ in 0..n {
        let a: mi = fi.r();
        lfsr.push(a);
    }
    writeln!(fo, "{}", lfsr.len());
    for x in lfsr.code_iter().map(|x| mi::zero() - *x) {
        write!(fo, "{} ", x);
    }
}
  
pub unsafe fn solve_multi<I: BufRead>(fi: &mut FastInput<I>, fo: &mut impl Write) {
    let t: usize = 1;//fi.read();
    for test_id in 1 ..= t {
        solve_one(test_id, fi, fo);
    }
}